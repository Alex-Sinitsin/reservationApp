{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\kolya\\\\Documents\\\\GitHub\\\\My_app-calendar\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:\\\\Users\\\\kolya\\\\Documents\\\\GitHub\\\\My_app-calendar\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\kolya\\\\Documents\\\\GitHub\\\\My_app-calendar\\\\src\\\\MyCalendar.js\";\nimport React, { useState, Component, useEffect, setState } from \"react\";\nimport { Alert, useAlert } from 'react-alert';\nimport { userName } from './Home';\nimport Clock from 'react-clock';\nimport { momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from '@fullcalendar/interaction';\nimport \"@fullcalendar/common/main.css\";\nimport \"@fullcalendar/daygrid/main.css\";\nimport \"@fullcalendar/timegrid/main.css\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport bootstrapPlugin from '@fullcalendar/bootstrap';\nexport default function MyCalendar() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      eventsList = _useState2[0],\n      setEventsList = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      alarmTime2 = _useState4[0],\n      setAlarm = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      seconds = _useState6[0],\n      setSeconds = _useState6[1];\n\n  var state = {\n    currentTime: new Date().toLocaleTimeString('ru', {\n      hour12: false\n    })\n  };\n  useEffect(function () {\n    var timer = setInterval(function () {\n      setSeconds(state.currentTime);\n    }, 1000);\n    return function () {\n      return clearInterval(timer);\n    };\n  });\n  var counter = 0;\n\n  while (counter != 100) {\n    if (state.currentTime === alarmTime2[counter]) {\n      alert(\"its time!\");\n    }\n\n    ;\n    counter = counter + 1;\n  }\n\n  return /*#__PURE__*/React.createElement(FullCalendar, {\n    firstDay: 1,\n    navLinks: true,\n    nowIndicator: true,\n    themeSystem: 'bootstrap',\n    height: 750,\n    slotDuration: '00:30:00',\n    defaultView: \"dayGridMonth\",\n    buttonText: {\n      today: 'сегодня',\n      month: 'месяц',\n      week: 'неделя',\n      day: 'день'\n    },\n    headerToolbar: {\n      left: \"prev today next\",\n      center: \"title\",\n      right: \"dayGridMonth,timeGridWeek,timeGridDay\"\n    },\n    footerToolbar: {\n      left: \"myCustomButton\"\n    },\n    customButtons: {\n      myCustomButton: {\n        text: 'Создать',\n        click: function click() {\n          var startDateStr = prompt('Введите время начала события (ГГГГ-ММ-ДД ЧЧ:ММ):');\n          var startDate = new Date(startDateStr); // will be in local time\n\n          var endDateStr = prompt('Введите время конца события (ГГГГ-ММ-ДД ЧЧ:ММ):');\n          var endDate = new Date(endDateStr); // will be in local time\n\n          var title = window.prompt(\"Введите название события:\");\n          var members = window.prompt(\"Введите имена участников:\");\n\n          if (members) {\n            if (title) {\n              if (!isNaN(startDate.valueOf())) {\n                // valid?\n                if (!isNaN(endDate.valueOf())) {\n                  // valid?\n                  var addEvent = {\n                    title: title,\n                    start: startDate,\n                    end: endDate,\n                    userName: {\n                      userName: userName\n                    },\n                    members: members,\n                    alarmTime1: startDate.toLocaleTimeString('ru', {\n                      hour12: false\n                    })\n                  };\n                  alert('Хорошо! Вы создали новое событие.');\n                  setEventsList([].concat(_toConsumableArray(eventsList), [addEvent]));\n                  setAlarm([].concat(_toConsumableArray(alarmTime2), [addEvent.alarmTime1]));\n                } else {\n                  alert('Invalid date.');\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    plugins: [dayGridPlugin, timeGridPlugin, bootstrapPlugin, interactionPlugin],\n    events: eventsList,\n    editable: true,\n    droppable: true,\n    eventResizableFromStart: true,\n    locale: \"ru\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/kolya/Documents/GitHub/My_app-calendar/src/MyCalendar.js"],"names":["React","useState","Component","useEffect","setState","Alert","useAlert","userName","Clock","momentLocalizer","moment","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","bootstrapPlugin","MyCalendar","eventsList","setEventsList","alarmTime2","setAlarm","seconds","setSeconds","state","currentTime","Date","toLocaleTimeString","hour12","timer","setInterval","clearInterval","counter","alert","today","month","week","day","left","center","right","myCustomButton","text","click","startDateStr","prompt","startDate","endDateStr","endDate","title","window","members","isNaN","valueOf","addEvent","start","end","alarmTime1"],"mappings":"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","sourcesContent":["import React, { useState, Component, useEffect, setState  } from \"react\";\r\nimport { Alert, useAlert } from 'react-alert'\r\nimport {userName} from './Home';\r\nimport Clock from 'react-clock';\r\nimport { momentLocalizer } from 'react-big-calendar'\r\nimport moment from 'moment'\r\n\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport interactionPlugin from '@fullcalendar/interaction';\r\n\r\nimport \"@fullcalendar/common/main.css\";\r\nimport \"@fullcalendar/daygrid/main.css\";\r\nimport \"@fullcalendar/timegrid/main.css\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport '@fortawesome/fontawesome-free/css/all.css';\r\n\r\nimport bootstrapPlugin from '@fullcalendar/bootstrap';\r\n\r\nexport default function MyCalendar() {\r\n\r\n    const [eventsList, setEventsList] = useState([]);\r\n        const [alarmTime2, setAlarm] = useState([]);\r\n        const [seconds, setSeconds] = useState([]);\r\n\r\n        var state = {\r\n           currentTime: new Date().toLocaleTimeString('ru', { hour12: false }),\r\n           }\r\n\r\n        useEffect(() => {\r\n                 const timer = setInterval(() => {\r\n                      setSeconds(\r\n                      state.currentTime )\r\n                 }, 1000);\r\n                 return () => clearInterval(timer);\r\n        });\r\n\r\n        var counter = 0;\r\n        while(counter != 100){\r\n             if(state.currentTime === alarmTime2[counter]) {\r\n                     alert(\"its time!\");\r\n                     };\r\n              counter = counter + 1;\r\n             }\r\n\r\n  return (\r\n      <FullCalendar\r\n        firstDay={1}\r\n        navLinks={true}\r\n        nowIndicator={true}\r\n        themeSystem={'bootstrap'}\r\n        height={750}\r\n        slotDuration={'00:30:00'}\r\n        defaultView=\"dayGridMonth\"\r\n                buttonText={{\r\n                      today:    'сегодня',\r\n                      month:    'месяц',\r\n                      week:     'неделя',\r\n                      day:      'день',\r\n                }}\r\n                headerToolbar={{\r\n                  left: \"prev today next\",\r\n                  center: \"title\",\r\n                  right: \"dayGridMonth,timeGridWeek,timeGridDay\"\r\n                }}\r\n                footerToolbar={{\r\n                    left: \"myCustomButton\"\r\n                }}\r\n                customButtons={{\r\n                        myCustomButton: {\r\n                            text: 'Создать',\r\n                                    click: function() {\r\n                                      var startDateStr = prompt('Введите время начала события (ГГГГ-ММ-ДД ЧЧ:ММ):');\r\n                                      var startDate = new Date(startDateStr); // will be in local time\r\n                                      var endDateStr = prompt('Введите время конца события (ГГГГ-ММ-ДД ЧЧ:ММ):');\r\n                                      var endDate = new Date(endDateStr); // will be in local time\r\n                                      const title = window.prompt(\"Введите название события:\");\r\n                                      const members = window.prompt(\"Введите имена участников:\");\r\n                                      if (members) {\r\n                                      if (title) {\r\n                                      if (!isNaN(startDate.valueOf())) { // valid?\r\n                                      if (!isNaN(endDate.valueOf())) { // valid?\r\n                                        var addEvent ={\r\n                                          title: title,\r\n                                          start: startDate,\r\n                                          end: endDate,\r\n                                          userName: {userName},\r\n                                          members: members,\r\n                                          alarmTime1: startDate.toLocaleTimeString('ru', { hour12: false })\r\n                                        };\r\n                                        alert('Хорошо! Вы создали новое событие.');\r\n                                        setEventsList([...eventsList, addEvent]);\r\n                                        setAlarm([...alarmTime2, addEvent.alarmTime1]);\r\n                                      } else {\r\n                                        alert('Invalid date.');\r\n                                        }\r\n                                      }\r\n                                      }\r\n                                      }\r\n                                    },\r\n                        },\r\n                    }}\r\n\r\n        plugins={[dayGridPlugin, timeGridPlugin, bootstrapPlugin, interactionPlugin ]}\r\n        events={eventsList}\r\n        editable={true}\r\n        droppable={true}\r\n        eventResizableFromStart={true}\r\n        locale=\"ru\"\r\n      />\r\n\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}